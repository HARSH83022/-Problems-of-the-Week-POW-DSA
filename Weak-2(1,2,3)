Problem of the Week – Longest Common Subsequence of Three Strings.This problem was asked by YouTube.
public class LCSOfThreeStrings {
Solution 1:-
    // Unoptimized brute-force recursive approach
    public static int lcsRecursive(String s1, String s2, String s3, int i, int j, int k) {
        if (i < 0 || j < 0 || k < 0) return 0;

        if (s1.charAt(i) == s2.charAt(j) && s2.charAt(j) == s3.charAt(k)) {
            return 1 + lcsRecursive(s1, s2, s3, i - 1, j - 1, k - 1);
        } else {
            return Math.max(
                Math.max(lcsRecursive(s1, s2, s3, i - 1, j, k),
                         lcsRecursive(s1, s2, s3, i, j - 1, k)),
                         lcsRecursive(s1, s2, s3, i, j, k - 1)
            );
        }
    }
    public static void main(String[] args) {
        String s1 = "epidemiologist";
        String s2 = "refrigeration";
        String s3 = "supercalifragilisticexpialodocious";

        int result = lcsRecursive(s1, s2, s3, s1.length() - 1, s2.length() - 1, s3.length() - 1);
        System.out.println("Length of LCS (Recursive): " + result);
    }
}
=================================================================================================================================================================================================
Approach 2: Optimized 3D Dynamic Programming
Time Complexity: O(n1 × n2 × n3)
Space Complexity: O(n1 × n2 × n3)

public class LCSOfThreeStringsDP {
    public static int lcsOfThree(String s1, String s2, String s3) {
        int n1 = s1.length();
        int n2 = s2.length();
        int n3 = s3.length();
        int[][][] dp = new int[n1 + 1][n2 + 1][n3 + 1];
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                for (int k = 1; k <= n3; k++) {
                    if (s1.charAt(i - 1) == s2.charAt(j - 1) && s2.charAt(j - 1) == s3.charAt(k - 1)) {
                        dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];
                    } else {
                        dp[i][j][k] = Math.max(
                            Math.max(dp[i - 1][j][k], dp[i][j - 1][k]),
                            dp[i][j][k - 1]
                        );
                    }
                }
            }
        }

        return dp[n1][n2][n3];
    }
    public static void main(String[] args) {
        java.util.Scanner scanner = new java.util.Scanner(System.in);
        String s1 = scanner.nextLine().trim();
        String s2 = scanner.nextLine().trim();
        String s3 = scanner.nextLine().trim();
        int result = lcsOfThree(s1, s2, s3);
        System.out.println(result);
    }
}
================================================================================================================================================
Problem Title: Smallest Non-Representable Sum
Question 2
Unoptimized Solution
import java.util.*;

public class SmallestNonRepresentableSum {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int n = input.length;
        int[] coins = new int[n];
        for (int i = 0; i < n; i++) {
            coins[i] = Integer.parseInt(input[i]);
        }

        Set<Integer> allSums = new HashSet<>();
        generateSums(coins, 0, 0, allSums);
        int missing = 1;
        while (allSums.contains(missing)) {
            missing++;
        }
        System.out.println(missing);
    }

    static void generateSums(int[] arr, int idx, int currentSum, Set<Integer> sums) {
        if (idx == arr.length) {
            if (currentSum > 0) sums.add(currentSum);
            return;
        }
        generateSums(arr, idx + 1, currentSum, sums);
        generateSums(arr, idx + 1, currentSum + arr[idx], sums);
    }
}
========================================================================================
Optimized Solution (Greedy, O(N))
import java.util.*;

public class SmallestNonRepresentableSum {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int n = input.length;
        long[] coins = new long[n];
        for (int i = 0; i < n; i++) {
            coins[i] = Long.parseLong(input[i]);
        }
        long result = findSmallestNonRepresentableSum(coins);
        System.out.println(result);
    }

    static long findSmallestNonRepresentableSum(long[] coins) {
        long res = 1;
        for (int i = 0; i < coins.length; i++) {
            if (coins[i] > res) {
                break;
            }
            res += coins[i];
        }
        return res;
    }
}


