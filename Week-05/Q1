q1
import java.util.*;

class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}

public class DeepCloneLinkedList {

    public Node copyRandomList(Node head) {
        if (head == null) return null;

        // Step 1: Map original nodes to their clones
        Map<Node, Node> map = new HashMap<>();
        Node curr = head;
        while (curr != null) {
            map.put(curr, new Node(curr.val));
            curr = curr.next;
        }

        // Step 2: Assign next and random pointers
        curr = head;
        while (curr != null) {
            Node clone = map.get(curr);
            clone.next = map.get(curr.next);
            clone.random = map.get(curr.random);
            curr = curr.next;
        }

        return map.get(head);
    }

    // Utility function to print list for debugging
    public void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print("Val: " + temp.val);
            if (temp.random != null) {
                System.out.print(", Random: " + temp.random.val);
            } else {
                System.out.print(", Random: null");
            }
            System.out.println();
            temp = temp.next;
        }
    }

    public static void main(String[] args) {
        // Creating example list
        Node n1 = new Node(7);
        Node n2 = new Node(13);
        Node n3 = new Node(11);
        Node n4 = new Node(10);
        Node n5 = new Node(1);

        n1.next = n2;
        n2.next = n3;
        n3.next = n4;
        n4.next = n5;

        n2.random = n1;
        n3.random = n5;
        n4.random = n3;
        n5.random = n1;

        DeepCloneLinkedList solution = new DeepCloneLinkedList();

        System.out.println("Original list:");
        solution.printList(n1);

        Node clonedHead = solution.copyRandomList(n1);

        System.out.println("\nCloned list:");
        solution.printList(clonedHead);
    }
}
