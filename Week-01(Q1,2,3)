 Q1-Problem of the Week – Min in Sorted Rotated Array
import java.util.Scanner;

public class FindMinRotatedArray {

    public static int findMin(int[] arr) {
        int low = 0;
        int high = arr.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] > arr[high]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return arr[low];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int[] arr = new int[n];

        for(int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println(findMin(arr));
        sc.close();
    }
}
Optimization of code!
import java.util.Scanner;

public class FindMinRotatedArray {

    public static int findMin(int[] arr) {
        int low = 0, high = arr.length - 1;

        while (low < high) {
            int mid = (low + high) >>> 1;
            if (arr[mid] > arr[high]) low = mid + 1;
            else high = mid;
        }
        return arr[low];
    }

    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; arr[i++] = sc.nextInt());
            System.out.println(findMin(arr));
        }
    }
}
================================================================================================================================================
Problem Title:2
Subarray Sum Equals K
You are working as a data analyst for a fitness app. Every day, users log the number of
calories burned. Your task is to find how many continuous days (subarrays) exist where the
total calories burned equals a certain target k. This helps the app identify specific goal-based
streaks.
Problem Statement:
Given an integer array nums representing the calories burned each day, and an integer k
representing a target calorie goal, return the total number of continuous subarrays whose
sum is exactly equal to k.
import java.util.Scanner;

public class SubarraySumBruteForce {
    public static int subarraySum(int[] nums, int k) {
        int count = 0;
        int n = nums.length;

        for (int start = 0; start < n; start++) {
            int sum = 0;
            for (int end = start; end < n; end++) {
                sum += nums[end];
                if (sum == k) {
                    count++;
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            int n = sc.nextInt();
            int[] nums = new int[n];
            for (int i = 0; i < n; i++) nums[i] = sc.nextInt();
            int k = sc.nextInt();

            System.out.println(subarraySum(nums, k));
        }
    }
}
2. Optimized Approach
import java.util.HashMap;
import java.util.Scanner;

public class SubarraySumOptimized {
    public static int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap<Integer, Integer> prefixSumFreq = new HashMap<>();
        prefixSumFreq.put(0, 1); // base case: sum == k

        for (int num : nums) {
            sum += num;

            if (prefixSumFreq.containsKey(sum - k)) {
                count += prefixSumFreq.get(sum - k);
            }

            prefixSumFreq.put(sum, prefixSumFreq.getOrDefault(sum, 0) + 1);
        }

        return count;
    }

    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            int n = sc.nextInt();
            int[] nums = new int[n];
            for (int i = 0; i < n; i++) nums[i] = sc.nextInt();
            int k = sc.nextInt();

            System.out.println(subarraySum(nums, k));
        }
    }
}

================================================================================================================================================
Ques3 Problem Description: Ruby Second House (Medium)
You are a construction manager overseeing the painting of a long row of houses. Each house
must be painted one of several available colors. However, adjacent houses cannot have the
same color to preserve aesthetic appeal.
Each painting option has a different cost. You are given a matrix where costs[i][j]
represents the cost of painting house i with color j.
Your task is to paint all houses such that:
• No two adjacent houses share the same color.
• The total painting cost is minimized.
Solution=
public class RubySecondHouse {
    public static int minCost(int[][] costs) {
        if (costs == null || costs.length == 0) return 0;

        int n = costs.length;
        int k = costs[0].length;
        int[][] dp = new int[n][k];

        for (int j = 0; j < k; j++) {
            dp[0][j] = costs[0][j];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < k; j++) {
                int min = Integer.MAX_VALUE;
                for (int m = 0; m < k; m++) {
                    if (m != j) {
                        min = Math.min(min, dp[i - 1][m]);
                    }
                }
                dp[i][j] = costs[i][j] + min;
            }
        }

        int result = Integer.MAX_VALUE;
        for (int j = 0; j < k; j++) {
            result = Math.min(result, dp[n - 1][j]);
        }

        return result;
    }

    public static void main(String[] args) {
        int[][] costs = {
            {17, 2, 17},
            {16, 16, 5},
            {14, 3, 19}
        };

        System.out.println("Minimum cost to paint all houses: " + minCost(costs));
    }
}
